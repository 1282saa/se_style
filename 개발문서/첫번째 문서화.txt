- 클로드 첫번째 대화 문서화
    
    # 한국어 교열 서비스 개발 프로젝트 문서
    
    ## 1. 프로젝트 개요
    
    본 프로젝트는 사내 구성원을 위한 한국어 교열 서비스를 개발하는 것을 목표로 합니다. 이 서비스는 사용자가 작성한 텍스트를 분석하여 두 가지 다른 스타일의 교정 결과를 제공하고, 사용자의 피드백을 통해 점진적으로 개인화된 교정 서비스로 발전하는 시스템입니다.
    
    ### 1.1 주요 기능
    
    - **두 가지 교열 결과 제공**:
        - 프롬프트1: 최소한의 필수적인 교정만 수행 (맞춤법, 띄어쓰기, 기본 문법 오류 등)
        - 프롬프트2: 적극적인 개선 (스타일, 어휘, 문장 구조 등 포괄적 개선)
    - **RAG(Retrieval Augmented Generation) 기반 스타일북 활용**: 회사 내 스타일 가이드를 임베딩하여 교정 시 참조
    - **사용자 피드백 시스템**: 두 가지 교정 결과 중 선호하는 것을 선택하고 평가
    - **데이터 기반 개인화**: 사용자의 선택과 피드백을 분석하여 맞춤형 교정 제공
    
    ## 2. 기술 스택
    
    ### 백엔드
    
    - **Node.js / Express.js**: RESTful API 구현
    - **MongoDB**: 데이터 저장 (교열 요청, 결과, 사용자 선택 데이터)
    - **OpenAI API / Claude API**: LLM 기반 텍스트 교정
    - **Vector DB (MongoDB Atlas Vector Search)**: 스타일북 저장 및 검색
    
    ### 프론트엔드
    
    - **React**: 사용자 인터페이스
    - **Tailwind CSS**: UI 스타일링
    - **React Router**: 클라이언트 사이드 라우팅
    
    ## 3. 현재 개발 상태
    
    현재까지 다음과 같은 백엔드 코드가 구현되었습니다:
    
    1. **MongoDB 모델**:
        - article.model.js: 교열 요청 모델
        - correction.model.js: 교열 결과 모델
        - userChoice.model.js: 사용자 선택 모델
        - styleGuide.model.js: 스타일 가이드 모델
    2. **LLM 서비스**:
        - llm.service.js: OpenAI API 및 Claude API 연동
    3. **RAG 서비스**:
        - embeddings.service.js: 텍스트 임베딩 생성
        - styleGuideRetriever.service.js: 스타일 가이드 검색
    4. **교열 서비스**:
        - proofreadingService.js: 교열 메인 로직
    5. **컨트롤러 및 라우터**:
        - article.controller.js: 기사 관련 컨트롤러
        - styleGuide.controller.js: 스타일 가이드 관련 컨트롤러
        - analytics.controller.js: 분석 관련 컨트롤러
        - 각종 라우트 파일
    6. **앱 설정**:
        - config/index.js: 환경 설정
        - app.js: 앱 엔트리포인트
    
    ## 4. 다음 개발 단계
    
    프로젝트를 이어서 진행할 개발자를 위한 단계별 개발 계획입니다.
    
    ### 4.1 백엔드 최적화 및 개선
    
    1. **services/rag/styleGuideRetriever.service.js 최적화**:
        - 벡터 유사도 계산 로직 최적화 (Float32Array 사용)
        - 청크 처리 방식 도입하여 메모리 사용량 개선
        - 코드 예시:
        
        ```jsx
        calculateCosineSimilarity(vecA, vecB) {
          if (!vecA || !vecB || vecA.length !== vecB.length) {
            return 0;
          }
        
          // 벡터 계산을 Float32Array로 변환하여 성능 향상
          const vecATyped = new Float32Array(vecA);
          const vecBTyped = new Float32Array(vecB);
        
          let dotProduct = 0;
          let normA = 0;
          let normB = 0;
        
          // 벡터 길이가 길 경우 청크 단위로 처리
          const chunkSize = 1000;
          for (let i = 0; i < vecATyped.length; i += chunkSize) {
            const end = Math.min(i + chunkSize, vecATyped.length);
            for (let j = i; j < end; j++) {
              dotProduct += vecATyped[j] * vecBTyped[j];
              normA += vecATyped[j] * vecATyped[j];
              normB += vecBTyped[j] * vecBTyped[j];
            }
          }
        
          normA = Math.sqrt(normA);
          normB = Math.sqrt(normB);
        
          if (normA === 0 || normB === 0) {
            return 0;
          }
        
          return dotProduct / (normA * normB);
        }
        
        ```
        
    2. **services/llm/llm.service.js 캐싱 메커니즘 추가**:
        - 동일한 입력에 대한 중복 API 호출 감소
        - 코드 예시:
        
        ```jsx
        // 캐싱 로직 추가
        const cache = new Map();
        const CACHE_TTL = 60 * 60 * 1000; // 1시간
        
        async generateWithOpenAI(prompt, cacheKey = null) {
          // 캐시 사용 시 캐시 확인
          if (cacheKey && cache.has(cacheKey)) {
            const { data, timestamp } = cache.get(cacheKey);
            if (Date.now() - timestamp < CACHE_TTL) {
              return data;
            }
          }
        
          // API 호출 및 결과 캐싱
          // ... API 호출 코드
        
          if (cacheKey) {
            cache.set(cacheKey, { data: result, timestamp: Date.now() });
          }
          return result;
        }
        
        ```
        
    3. **services/proofreadingService.js 병렬 처리 개선**:
        - 두 가지 교정 버전을 병렬로 생성하여 응답 시간 단축
        - 코드 예시:
        
        ```jsx
        async proofreadArticle(articleId) {
          try {
            // 1. 기사 조회
            const article = await Article.findById(articleId);
            if (!article) {
              throw new Error('기사를 찾을 수 없습니다.');
            }
        
            // 2. 관련 스타일 가이드 규칙 검색
            const relevantRules = await styleGuideRetriever.retrieveRelevantRules(article.originalText);
        
            // 3. 두 가지 버전의 교열 결과를 병렬로 생성 (동시성 개선)
            const [correction1, correction2] = await Promise.all([
              this.generateCorrectionWithPrompt1(article, relevantRules),
              this.generateCorrectionWithPrompt2(article, relevantRules)
            ]);
        
            return [correction1, correction2];
          } catch (error) {
            console.error('Error proofreading article:', error);
            throw new Error(`기사 교열 중 오류 발생: ${error.message}`);
          }
        }
        
        ```
        
    4. **에러 처리 및 로깅 개선**:
        - utils/logger.js 구현
        - 코드 예시:
        
        ```jsx
        const winston = require('winston');
        require('winston-daily-rotate-file');
        
        // 로그 포맷 설정
        const logFormat = winston.format.printf(({ level, message, timestamp, ...meta }) => {
          return `${timestamp} ${level}: ${message} ${Object.keys(meta).length ? JSON.stringify(meta) : ''}`;
        });
        
        // 로거 설정
        const logger = winston.createLogger({
          format: winston.format.combine(
            winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
            logFormat
          ),
          transports: [
            new winston.transports.Console(),
            new winston.transports.DailyRotateFile({
              filename: 'logs/application-%DATE%.log',
              datePattern: 'YYYY-MM-DD',
              maxSize: '20m',
              maxFiles: '14d'
            })
          ]
        });
        
        module.exports = logger;
        
        ```
        
    
    ### 4.2 스타일북 벡터화 및 저장
    
    1. **스타일북 JSON 파싱 및 벡터화**:
        - JSON 형식의 스타일북을 읽어와 각 규칙 항목별로 임베딩 생성
        - 코드 예시:
        
        ```jsx
        // services/styleBook/styleBookImporter.js
        const fs = require('fs').promises;
        const path = require('path');
        const StyleGuide = require('../../models/styleGuide.model');
        const embeddingsService = require('../rag/embeddings.service');
        const logger = require('../../utils/logger');
        
        async function importStyleBook(filePath) {
          try {
            // 1. JSON 파일 읽기
            const data = await fs.readFile(filePath, 'utf8');
            const styleBook = JSON.parse(data);
        
            // 2. 각 규칙을 임베딩하고 MongoDB에 저장
            let importedCount = 0;
        
            for (const rule of styleBook) {
              // 규칙 텍스트 생성 (예: "규정: ~~. 설명: ~~. 예: ~~")
              const ruleText = `규정: ${rule.title}. 설명: ${rule.description}. ${rule.examples ? `예: ${rule.examples.join(', ')}` : ''}`;
        
              // 임베딩 생성
              const embedding = await embeddingsService.createEmbedding(ruleText);
        
              // MongoDB에 저장
              const styleGuide = new StyleGuide({
                category: rule.category || '일반',
                section: rule.title,
                content: rule.description,
                examples: rule.examples,
                tags: rule.tags || [],
                vector: embedding,
                version: rule.version || '1.0'
              });
        
              await styleGuide.save();
              importedCount++;
            }
        
            logger.info(`스타일북 임포트 완료: ${importedCount}개 규칙 저장됨`);
            return importedCount;
          } catch (error) {
            logger.error(`스타일북 임포트 중 오류: ${error.message}`);
            throw error;
          }
        }
        
        module.exports = { importStyleBook };
        
        ```
        
    2. **벡터 DB 연동 (선택적)**:
        - MongoDB 외에 전용 벡터 DB(Pinecone, Qdrant 등) 연동
        - 코드 예시 (Pinecone 사용 시):
        
        ```jsx
        // services/rag/vectorDb.service.js
        const { Pinecone } = require('@pinecone-database/pinecone');
        const config = require('../../config');
        const logger = require('../../utils/logger');
        
        class VectorDbService {
          constructor() {
            this.pinecone = new Pinecone({
              apiKey: config.PINECONE_API_KEY,
              environment: config.PINECONE_ENVIRONMENT
            });
            this.index = this.pinecone.Index(config.PINECONE_INDEX);
          }
        
          async upsertVector(id, vector, metadata) {
            try {
              await this.index.upsert([{
                id,
                values: vector,
                metadata
              }]);
              return true;
            } catch (error) {
              logger.error(`Vector upsert error: ${error.message}`);
              throw error;
            }
          }
        
          async searchSimilar(vector, topK = 5) {
            try {
              const results = await this.index.query({
                vector,
                topK,
                includeMetadata: true
              });
              return results.matches;
            } catch (error) {
              logger.error(`Vector search error: ${error.message}`);
              throw error;
            }
          }
        }
        
        module.exports = new VectorDbService();
        
        ```
        
    
    ### 4.3 테스트 구현
    
    1. **단위 테스트 작성**:
        - 각 서비스 함수에 대한 테스트 코드 작성
        - 코드 예시 (Jest 사용):
        
        ```jsx
        // tests/services/llm.service.test.js
        const llmService = require('../../src/services/llm/llm.service');
        const config = require('../../src/config');
        
        jest.mock('axios');
        const axios = require('axios');
        
        describe('LLM Service', () => {
          beforeEach(() => {
            jest.clearAllMocks();
          });
        
          test('generateWithOpenAI should call OpenAI API and return response', async () => {
            // Mock setup
            const mockResponse = {
              data: {
                choices: [{ message: { content: '교정된 텍스트' } }]
              }
            };
            axios.post.mockResolvedValue(mockResponse);
        
            // Test execution
            const result = await llmService.generateWithOpenAI('테스트 프롬프트');
        
            // Assertions
            expect(axios.post).toHaveBeenCalledWith(
              expect.stringContaining('openai'),
              expect.objectContaining({
                model: config.LLM_MODEL,
                messages: expect.arrayContaining([
                  expect.objectContaining({ content: '테스트 프롬프트' })
                ])
              }),
              expect.any(Object)
            );
            expect(result).toBe('교정된 텍스트');
          });
        
          // More tests...
        });
        
        ```
        
    2. **통합 테스트 작성**:
        - API 엔드포인트에 대한 테스트 구현
        - 코드 예시:
        
        ```jsx
        // tests/integration/article.routes.test.js
        const request = require('supertest');
        const mongoose = require('mongoose');
        const app = require('../../src/app');
        const Article = require('../../src/models/article.model');
        const { MongoMemoryServer } = require('mongodb-memory-server');
        
        let mongoServer;
        
        beforeAll(async () => {
          mongoServer = await MongoMemoryServer.create();
          await mongoose.connect(mongoServer.getUri());
        });
        
        afterAll(async () => {
          await mongoose.disconnect();
          await mongoServer.stop();
        });
        
        describe('Article API', () => {
          beforeEach(async () => {
            await Article.deleteMany({});
          });
        
          test('POST /api/articles should create a new article', async () => {
            const articleData = {
              userId: 'test-user',
              originalText: '테스트 문장입니다.',
              topic: '테스트',
              category: '일반'
            };
        
            const response = await request(app)
              .post('/api/articles')
              .send(articleData)
              .expect(201);
        
            expect(response.body).toHaveProperty('_id');
            expect(response.body.originalText).toBe(articleData.originalText);
        
            // Verify in database
            const savedArticle = await Article.findById(response.body._id);
            expect(savedArticle).not.toBeNull();
            expect(savedArticle.originalText).toBe(articleData.originalText);
          });
        
          // More endpoint tests...
        });
        
        ```
        
    
    ### 4.4 프론트엔드 개발
    
    백엔드 최적화 및 개선이 완료된 후에는 프론트엔드 개발을 진행할 수 있습니다. 현재 기반이 된 코드는 다음과 같습니다:
    
    1. **ArticleInput.js**: 교열할 텍스트 입력 컴포넌트
    2. **CorrectionCompare.js**: 두 가지 교정 결과를 비교하는 컴포넌트
    3. **App.js**: 메인 앱 컴포넌트와 라우팅
    
    프론트엔드 개발자는 이 코드를 기반으로 UI/UX를 개선하고 더 많은 기능을 추가할 수 있습니다.
    
    ## 5. 배포 및 운영 계획
    
    프로젝트가 완성된 후 배포 및 운영 방안은 다음과 같습니다:
    
    ### 5.1 권장 배포 방식
    
    1. **단일 VPS/VM에 Docker Compose로 배포**:
        - Docker 컨테이너로 프론트엔드, 백엔드, MongoDB를 패키징
        - 사내망에 배포하여 보안 유지
        - 간단한 CI/CD 파이프라인 구축 (예: GitHub Actions)
    2. **Vercel + MongoDB Atlas 조합 (선택적)**:
        - 프론트엔드는 Vercel에 배포
        - 백엔드는 Vercel Serverless Functions 또는 별도 서버
        - MongoDB Atlas로 데이터베이스 관리
    
    ### 5.2 모니터링 및 백업
    
    1. **로그 수집 및 모니터링**:
        - Winston 로거를 통한 로그 파일 생성
        - 필요시 ELK 스택 도입 (소규모에서는 선택적)
    2. **데이터 백업**:
        - MongoDB 정기 백업 설정 (Atlas 사용 시 자동 백업)
        - 중요 데이터 (스타일북, 사용자 피드백 등) 추가 백업
    
    ## 6. 의존성 및 환경 설정
    
    현재 프로젝트의 주요 의존성은 다음과 같습니다:
    
    ```json
    // package.json
    {
      "dependencies": {
        "axios": "^1.6.2",
        "cors": "^2.8.5",
        "dotenv": "^16.3.1",
        "express": "^4.18.2",
        "mongoose": "^8.0.1"
      },
      "devDependencies": {
        "jest": "^29.7.0",
        "nodemon": "^3.0.1"
      }
    }
    
    ```
    
    환경 변수는 다음과 같이 설정해야 합니다:
    
    ```
    # .env 파일
    PORT=3000
    MONGODB_URI=mongodb://localhost:27017/proofreading-service
    OPENAI_API_KEY=your_openai_api_key_here
    ANTHROPIC_API_KEY=your_anthropic_api_key_here
    LLM_MODEL=gpt-4
    EMBEDDING_MODEL=text-embedding-3-small
    NODE_ENV=development
    CORS_ORIGIN=http://localhost:3001
    
    ```
    
    ## 7. 결론 및 다음 단계
    
    이 문서는 한국어 교열 서비스 개발 프로젝트의 현재 상태와 앞으로의 개발 방향을 정리한 것입니다. 코딩 초보자도 단계적으로 따라할 수 있도록 구체적인 코드 예시와 설명을 포함했습니다.
    
    다음 작업자는 위에서 설명한 단계별 개발 계획을 참고하여 백엔드 최적화부터 시작하고, 이후 프론트엔드 개발로 넘어가면 됩니다. 특히 RAG 시스템의 성능 최적화와 LLM 서비스의 캐싱 메커니즘 추가가 중요한 개선 포인트입니다.
    
    모든 개발이 완료된 후에는 테스트를 충분히 진행하고, 위에서 제안한 배포 방식 중 하나를 선택하여 서비스를 운영할 수 있습니다.