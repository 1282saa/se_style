{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_URL = \"http://localhost:3003/api\"; // 하드코딩으로 3003 포트 지정\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 인터셉터 설정 (에러 처리, 인증 등)\napi.interceptors.response.use(response => response, error => {\n  const {\n    response\n  } = error;\n\n  // 에러 응답 처리\n  if (response) {\n    console.error(\"API 오류:\", response.status, response.data);\n  } else {\n    console.error(\"네트워크 오류:\", error.message);\n  }\n  return Promise.reject(error);\n});\n\n// 기사 관련 API 함수\nexport const articleApi = {\n  // 새 교열 요청 생성\n  createArticle: articleData => api.post(\"/articles\", articleData),\n  // 특정 교열 요청 조회\n  getArticle: id => api.get(`/articles/${id}`),\n  // 기사 교열 실행\n  proofreadArticle: id => api.post(`/articles/${id}/proofread`),\n  // 교열 결과 조회\n  getCorrections: id => api.get(`/articles/${id}/corrections`),\n  // 사용자 선택 저장\n  saveUserChoice: (id, choiceData) => api.post(`/articles/${id}/choice`, choiceData),\n  // 사용자별 교열 요청 목록 조회\n  getUserArticles: (userId, page = 1, limit = 10) => api.get(`/articles/user/${userId}`, {\n    params: {\n      page,\n      limit\n    }\n  })\n};\n\n// 스타일 가이드 관련 API 함수\nexport const styleGuideApi = {\n  // 스타일 가이드 항목 추가\n  createStyleGuide: styleGuideData => api.post(\"/styleguides\", styleGuideData),\n  // 스타일 가이드 목록 조회\n  getStyleGuides: params => api.get(\"/styleguides\", {\n    params\n  }),\n  // 스타일 가이드 항목 수정\n  updateStyleGuide: (id, styleGuideData) => api.put(`/styleguides/${id}`, styleGuideData),\n  // 스타일 가이드 항목 삭제\n  deleteStyleGuide: id => api.delete(`/styleguides/${id}`),\n  // 시맨틱 검색 - 텍스트 내용 기반 유사 스타일 가이드 검색\n  searchSemantic: (query, limit = 5, category = null) => {\n    const data = {\n      query,\n      limit\n    };\n    if (category) data.category = category;\n    return api.post(\"/styleguides/search-semantic\", data);\n  }\n};\n\n// 소셜 미디어 관련 API 함수\nexport const socialMediaApi = {\n  // 연결된 소셜 미디어 계정 목록 조회\n  getConnectedAccounts: userId => api.get(\"/social/accounts\", {\n    params: {\n      userId\n    }\n  }),\n  // 소셜 미디어 계정 연결\n  connectAccount: (platform, credentials) => api.post(`/social/connect/${platform}`, credentials),\n  // 소셜 미디어 게시물 생성\n  generatePost: (articleId, data) => api.post(\"/social/generate\", {\n    articleId,\n    ...data\n  }),\n  // 소셜 미디어에 게시\n  publishPost: (postId, userId) => api.post(`/social/publish/${postId}`, {\n    userId\n  }),\n  // 사용자의 소셜 미디어 포스트 목록 조회\n  getUserPosts: (userId, page = 1, limit = 10) => api.get(\"/social/posts\", {\n    params: {\n      userId,\n      page,\n      limit\n    }\n  })\n};\n\n// 분석 관련 API 함수\nexport const analyticsApi = {\n  // 프롬프트별 성능 분석\n  getPromptPerformance: timeRange => api.get(\"/analytics/prompt-performance\", {\n    params: {\n      timeRange\n    }\n  }),\n  // 사용자별 선호도 분석\n  getUserPreferences: userId => api.get(`/analytics/user/${userId}/preferences`)\n};\nexport default {\n  articleApi,\n  styleGuideApi,\n  analyticsApi,\n  socialMediaApi\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","interceptors","response","use","error","console","status","data","message","Promise","reject","articleApi","createArticle","articleData","post","getArticle","id","get","proofreadArticle","getCorrections","saveUserChoice","choiceData","getUserArticles","userId","page","limit","params","styleGuideApi","createStyleGuide","styleGuideData","getStyleGuides","updateStyleGuide","put","deleteStyleGuide","delete","searchSemantic","query","category","socialMediaApi","getConnectedAccounts","connectAccount","platform","credentials","generatePost","articleId","publishPost","postId","getUserPosts","analyticsApi","getPromptPerformance","timeRange","getUserPreferences"],"sources":["/Users/yeong-gwang/Desktop/work/서울경제신문/개발작업/맞춤형교열시스템개발/dual-proofreading-service/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_URL = \"http://localhost:3003/api\"; // 하드코딩으로 3003 포트 지정\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 인터셉터 설정 (에러 처리, 인증 등)\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const { response } = error;\n\n    // 에러 응답 처리\n    if (response) {\n      console.error(\"API 오류:\", response.status, response.data);\n    } else {\n      console.error(\"네트워크 오류:\", error.message);\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// 기사 관련 API 함수\nexport const articleApi = {\n  // 새 교열 요청 생성\n  createArticle: (articleData) => api.post(\"/articles\", articleData),\n\n  // 특정 교열 요청 조회\n  getArticle: (id) => api.get(`/articles/${id}`),\n\n  // 기사 교열 실행\n  proofreadArticle: (id) => api.post(`/articles/${id}/proofread`),\n\n  // 교열 결과 조회\n  getCorrections: (id) => api.get(`/articles/${id}/corrections`),\n\n  // 사용자 선택 저장\n  saveUserChoice: (id, choiceData) =>\n    api.post(`/articles/${id}/choice`, choiceData),\n\n  // 사용자별 교열 요청 목록 조회\n  getUserArticles: (userId, page = 1, limit = 10) =>\n    api.get(`/articles/user/${userId}`, {\n      params: { page, limit },\n    }),\n};\n\n// 스타일 가이드 관련 API 함수\nexport const styleGuideApi = {\n  // 스타일 가이드 항목 추가\n  createStyleGuide: (styleGuideData) =>\n    api.post(\"/styleguides\", styleGuideData),\n\n  // 스타일 가이드 목록 조회\n  getStyleGuides: (params) => api.get(\"/styleguides\", { params }),\n\n  // 스타일 가이드 항목 수정\n  updateStyleGuide: (id, styleGuideData) =>\n    api.put(`/styleguides/${id}`, styleGuideData),\n\n  // 스타일 가이드 항목 삭제\n  deleteStyleGuide: (id) => api.delete(`/styleguides/${id}`),\n\n  // 시맨틱 검색 - 텍스트 내용 기반 유사 스타일 가이드 검색\n  searchSemantic: (query, limit = 5, category = null) => {\n    const data = { query, limit };\n    if (category) data.category = category;\n    return api.post(\"/styleguides/search-semantic\", data);\n  },\n};\n\n// 소셜 미디어 관련 API 함수\nexport const socialMediaApi = {\n  // 연결된 소셜 미디어 계정 목록 조회\n  getConnectedAccounts: (userId) =>\n    api.get(\"/social/accounts\", { params: { userId } }),\n\n  // 소셜 미디어 계정 연결\n  connectAccount: (platform, credentials) =>\n    api.post(`/social/connect/${platform}`, credentials),\n\n  // 소셜 미디어 게시물 생성\n  generatePost: (articleId, data) =>\n    api.post(\"/social/generate\", { articleId, ...data }),\n\n  // 소셜 미디어에 게시\n  publishPost: (postId, userId) =>\n    api.post(`/social/publish/${postId}`, { userId }),\n\n  // 사용자의 소셜 미디어 포스트 목록 조회\n  getUserPosts: (userId, page = 1, limit = 10) =>\n    api.get(\"/social/posts\", { params: { userId, page, limit } }),\n};\n\n// 분석 관련 API 함수\nexport const analyticsApi = {\n  // 프롬프트별 성능 분석\n  getPromptPerformance: (timeRange) =>\n    api.get(\"/analytics/prompt-performance\", {\n      params: { timeRange },\n    }),\n\n  // 사용자별 선호도 분석\n  getUserPreferences: (userId) =>\n    api.get(`/analytics/user/${userId}/preferences`),\n};\n\nexport default {\n  articleApi,\n  styleGuideApi,\n  analyticsApi,\n  socialMediaApi,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}